Line No 1 -> type_specifier : INT
int

Line No 1 -> type_specifier : INT
int

Line No 1 -> parameter_list : type_specifier ID
int a

Line No 2 -> variable : ID
a

Line No 2 -> factor : CONST_INT
2

Line No 2 -> unary_expression : factor
2

Line No 2 -> term : unary_expression
2

Line No 2 -> simple_expression : term
2

Line No 2 -> rel_expression : simple_expression
2

Line No 2 -> logic_expression : rel_expression
2

Line No 2 -> expression : variable ASSIGNOP logic_expression
a=2

Assigned values : INT 2 0.000000

Line No 2 -> expression_statement : expression SEMICOLON
a=2;


Line No 2 -> statement : expression_statement
a=2;


Line No 2 -> statements : statement
a=2;


Line No 3 -> variable : ID
a

Line No 3 -> factor : variable
a

Line No 3 -> unary_expression : factor
a

Line No 3 -> term : unary_expression
a

Line No 3 -> simple_expression : term
a

Line No 3 -> rel_expression : simple_expression
a

Line No 3 -> logic_expression : rel_expression
a

Line No 3 -> expression : logic_expression
a

Line No 3 -> statement : RETURN expression SEMICOLON
return a;


Line No 3 -> statements : statements statement
a=2;
return a;


Line No 4 -> compound_statement : LCURL statements RCURL
{
a=2;
return a;
}


***PRINTING SYMBOL TABLE***

Scope Table # 1
11 --> < a : VAR,INT > 

Line No 4 -> func_definition : type_specifier ID LPAREN parameter_list RPAREN
int func(int a){
a=2;
return a;
}


Line No 4 -> unit : func_definition
int func(int a){
a=2;
return a;
}


Line No 4 -> program : unit
int func(int a){
a=2;
return a;
}


Line No 6 -> type_specifier : FLOAT
float

Line No 7 -> factor : CONST_FLOAT
1.0

Line No 7 -> unary_expression : factor
1.0

Line No 7 -> term : unary_expression
1.0

Line No 7 -> simple_expression : term
1.0

Line No 7 -> rel_expression : simple_expression
1.0

Line No 7 -> logic_expression : rel_expression
1.0

Line No 7 -> expression : logic_expression
1.0

Line No 7 -> statement : RETURN expression SEMICOLON
return 1.0;


Line No 7 -> statements : statement
return 1.0;


Line No 8 -> compound_statement : LCURL statements RCURL
{
return 1.0;
}


***PRINTING SYMBOL TABLE***

Scope Table # 2
9 --> < func : FUNC,INT > 


Scope Table # 3

Line No 8 -> func_definition : type_specifier ID LPAREN RPAREN compound_statement
float f(){
return 1.0;
}


Line No 8 -> unit : func_definition
float f(){
return 1.0;
}


Line No 8 -> program : program unit
int func(int a){
a=2;
return a;
}
float f(){
return 1.0;
}


Line No 10 -> type_specifier : VOID
void

Line No 11 -> factor : CONST_INT
0

Line No 11 -> unary_expression : factor
0

Line No 11 -> term : unary_expression
0

Line No 11 -> simple_expression : term
0

Line No 11 -> rel_expression : simple_expression
0

Line No 11 -> logic_expression : rel_expression
0

Line No 11 -> expression : logic_expression
0

Line No 11 -> statement : RETURN expression SEMICOLON
return 0;


Line No 11 -> statements : statement
return 0;


Line No 12 -> compound_statement : LCURL statements RCURL
{
return 0;
}


***PRINTING SYMBOL TABLE***

Scope Table # 2
9 --> < func : FUNC,INT > 
10 --> < f : FUNC,FLOAT > 


Scope Table # 4

Line No 12 -> func_definition : type_specifier ID LPAREN RPAREN compound_statement
void g(){
return 0;
}


Line No 12 -> unit : func_definition
void g(){
return 0;
}


Line No 12 -> program : program unit
int func(int a){
a=2;
return a;
}
float f(){
return 1.0;
}
void g(){
return 0;
}


Line No 14 -> type_specifier : INT
int

Line No 14 -> type_specifier : INT
int

Line No 14 -> parameter_list : type_specifier ID
int a

Line No 14 -> func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON
int h(int a);


Line No 14 -> unit : func_declaration
int h(int a);


Line No 14 -> program : program unit
int func(int a){
a=2;
return a;
}
float f(){
return 1.0;
}
void g(){
return 0;
}
int h(int a);


Line No 16 -> type_specifier : INT
int

Line No 17 -> type_specifier : INT
int

Line No 17 -> declaration_list : ID LTHIRD CONST_INT RTHIRD
a[2]

Line No 17 -> declaration_list : declaration_list COMMA ID
a[2],c

Line No 17 -> declaration_list : declaration_list COMMA ID
a[2],c,i

Line No 17 -> declaration_list : declaration_list COMMA ID
a[2],c,i,j

Line No 17 -> var_declaration : type_specifier declaration_list SEMICOLON
int a[2],c,i,j;


Line No 17 -> statement : var_declaration
int a[2],c,i,j;


Line No 17 -> statements : statement
int a[2],c,i,j;


Line No 18 -> type_specifier : FLOAT
float

Line No 18 -> declaration_list : ID
c

Line No 18 -> var_declaration : type_specifier declaration_list SEMICOLON
float c;


Line No 18 -> statement : var_declaration
float c;


Line No 18 -> statements : statements statement
int a[2],c,i,j;
float c;


Line No 19 -> variable : ID
i

Line No 19 -> factor : CONST_FLOAT
2.3

Line No 19 -> unary_expression : factor
2.3

Line No 19 -> term : unary_expression
2.3

Line No 19 -> simple_expression : term
2.3

Line No 19 -> rel_expression : simple_expression
2.3

Line No 19 -> logic_expression : rel_expression
2.3

Line No 19 -> expression : variable ASSIGNOP logic_expression
i=2.3

Assigned values : INT 2 0.000000

Line No 19 -> expression_statement : expression SEMICOLON
i=2.3;


Line No 19 -> statement : expression_statement
i=2.3;


Line No 19 -> statements : statements statement
int a[2],c,i,j;
float c;
i=2.3;


Line No 20 -> factor : CONST_FLOAT
2.5

Line No 20 -> unary_expression : factor
2.5

Line No 20 -> term : unary_expression
2.5

Line No 20 -> simple_expression : term
2.5

Line No 20 -> rel_expression : simple_expression
2.5

Line No 20 -> logic_expression : rel_expression
2.5

Line No 20 -> expression : logic_expression
2.5

Line No 20 -> variable : ID LTHIRD expression RTHIRD
a[2.5]

Line No 20 -> factor : CONST_INT
1

Line No 20 -> unary_expression : factor
1

Line No 20 -> term : unary_expression
1

Line No 20 -> simple_expression : term
1

Line No 20 -> rel_expression : simple_expression
1

Line No 20 -> logic_expression : rel_expression
1

Line No 20 -> expression : variable ASSIGNOP logic_expression
a[2.5]=1

Assigned values : INT 1 0.000000

Line No 20 -> expression_statement : expression SEMICOLON
a[2.5]=1;


Line No 20 -> statement : expression_statement
a[2.5]=1;


Line No 20 -> statements : statements statement
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;


Line No 21 -> variable : ID
j

Line No 21 -> factor : CONST_INT
2

Line No 21 -> unary_expression : factor
2

Line No 21 -> term : unary_expression
2

Line No 21 -> factor : CONST_FLOAT
3.7

Line No 21 -> unary_expression : factor
3.7

Line No 21 -> term : term MULOP unary_expression
2%3.7

Calculated values: FLOAT 2 2.000000

Line No 21 -> simple_expression : term
2%3.7

Line No 21 -> rel_expression : simple_expression
2%3.7

Line No 21 -> logic_expression : rel_expression
2%3.7

Line No 21 -> expression : variable ASSIGNOP logic_expression
j=2%3.7

Assigned values : INT 2 0.000000

Line No 21 -> expression_statement : expression SEMICOLON
j=2%3.7;


Line No 21 -> statement : expression_statement
j=2%3.7;


Line No 21 -> statements : statements statement
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;


Line No 22 -> variable : ID
j

Line No 22 -> factor : CONST_INT
2

Line No 22 -> unary_expression : factor
2

Line No 22 -> term : unary_expression
2

Line No 22 -> argument_list : <empty>
Line No 22 -> factor : ID LPAREN argument_list RPAREN
f()

Line No 22 -> unary_expression : factor
f()

Line No 22 -> term : term MULOP unary_expression
2%f()

Calculated values: FLOAT 2 2.000000

Line No 22 -> simple_expression : term
2%f()

Line No 22 -> rel_expression : simple_expression
2%f()

Line No 22 -> logic_expression : rel_expression
2%f()

Line No 22 -> expression : variable ASSIGNOP logic_expression
j=2%f()

Assigned values : INT 2 0.000000

Line No 22 -> expression_statement : expression SEMICOLON
j=2%f();


Line No 22 -> statement : expression_statement
j=2%f();


Line No 22 -> statements : statements statement
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();


Line No 23 -> variable : ID
a

Line No 23 -> factor : variable
a

Line No 23 -> unary_expression : factor
a

Line No 23 -> term : unary_expression
a

Line No 23 -> simple_expression : term
a

Line No 23 -> rel_expression : simple_expression
a

Line No 23 -> logic_expression : rel_expression
a

Line No 23 -> arguments : logic_expression
a

Line No 23 -> argument_list : arguments
a

Line No 23 -> factor : ID LPAREN argument_list RPAREN
func(a)

Line No 23 -> unary_expression : factor
func(a)

Line No 23 -> term : unary_expression
func(a)

Line No 23 -> simple_expression : term
func(a)

Line No 23 -> rel_expression : simple_expression
func(a)

Line No 23 -> logic_expression : rel_expression
func(a)

Line No 23 -> expression : logic_expression
func(a)

Line No 23 -> expression_statement : expression SEMICOLON
func(a);


Line No 23 -> statement : expression_statement
func(a);


Line No 23 -> statements : statements statement
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);


Line No 24 -> variable : ID
j

Line No 24 -> argument_list : <empty>
Line No 24 -> factor : ID LPAREN argument_list RPAREN
g()

Line No 24 -> unary_expression : factor
g()

Line No 24 -> term : unary_expression
g()

Line No 24 -> simple_expression : term
g()

Line No 24 -> rel_expression : simple_expression
g()

Line No 24 -> logic_expression : rel_expression
g()

Line No 24 -> expression : variable ASSIGNOP logic_expression
j=g()

Assigned values : INT 0 0.000000

Line No 24 -> expression_statement : expression SEMICOLON
j=g();


Line No 24 -> statement : expression_statement
j=g();


Line No 24 -> statements : statements statement
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();


Line No 25 -> variable : ID
j

Line No 25 -> factor : CONST_INT
2

Line No 25 -> unary_expression : factor
2

Line No 25 -> term : unary_expression
2

Line No 25 -> factor : CONST_FLOAT
3.5

Line No 25 -> unary_expression : factor
3.5

Line No 25 -> term : unary_expression
3.5

Line No 25 -> simple_expression : term
3.5

Line No 25 -> factor : CONST_INT
4

Line No 25 -> unary_expression : factor
4

Line No 25 -> term : unary_expression
4

Line No 25 -> simple_expression : term
4

Line No 25 -> rel_expression : simple_expression RELOP simple_expression
3.5<4

Line No 25 -> logic_expression : rel_expression
3.5<4

Line No 25 -> expression : logic_expression
3.5<4

Line No 25 -> factor : LPAREN expression RPAREN
(3.5<4)

Line No 25 -> unary_expression : factor
(3.5<4)

Line No 25 -> term : term MULOP unary_expression
2%(3.5<4)

Calculated values: INT 0 0.000000

Line No 25 -> simple_expression : term
2%(3.5<4)

Line No 25 -> rel_expression : simple_expression
2%(3.5<4)

Line No 25 -> logic_expression : rel_expression
2%(3.5<4)

Line No 25 -> expression : variable ASSIGNOP logic_expression
j=2%(3.5<4)

Assigned values : INT 0 0.000000

Line No 25 -> expression_statement : expression SEMICOLON
j=2%(3.5<4);


Line No 25 -> statement : expression_statement
j=2%(3.5<4);


Line No 25 -> statements : statements statement
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);


Line No 26 -> variable : ID
b

Line No 26 -> factor : CONST_INT
8

Line No 26 -> unary_expression : factor
8

Line No 26 -> term : unary_expression
8

Line No 26 -> simple_expression : term
8

Line No 26 -> rel_expression : simple_expression
8

Line No 26 -> logic_expression : rel_expression
8

Line No 26 -> expression : variable ASSIGNOP logic_expression
b=8

Assigned values :  0 8.000000

Line No 26 -> expression_statement : expression SEMICOLON
b=8;


Line No 26 -> statement : expression_statement
b=8;


Line No 26 -> statements : statements statement
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;


Line No 27 -> variable : ID
a

Line No 27 -> factor : CONST_INT
4

Line No 27 -> unary_expression : factor
4

Line No 27 -> term : unary_expression
4

Line No 27 -> simple_expression : term
4

Line No 27 -> rel_expression : simple_expression
4

Line No 27 -> logic_expression : rel_expression
4

Line No 27 -> expression : variable ASSIGNOP logic_expression
a=4

Assigned values :  0 4.000000

Line No 27 -> expression_statement : expression SEMICOLON
a=4;


Line No 27 -> statement : expression_statement
a=4;


Line No 27 -> statements : statements statement
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;


Line No 28 -> factor : CONST_INT
3

Line No 28 -> unary_expression : factor
3

Line No 28 -> term : unary_expression
3

Line No 28 -> simple_expression : term
3

Line No 28 -> rel_expression : simple_expression
3

Line No 28 -> logic_expression : rel_expression
3

Line No 28 -> expression : logic_expression
3

Line No 28 -> variable : ID LTHIRD expression RTHIRD
i[3]

Line No 28 -> factor : CONST_INT
1

Line No 28 -> unary_expression : factor
1

Line No 28 -> term : unary_expression
1

Line No 28 -> simple_expression : term
1

Line No 28 -> rel_expression : simple_expression
1

Line No 28 -> logic_expression : rel_expression
1

Line No 28 -> expression : variable ASSIGNOP logic_expression
i[3]=1

Assigned values :  0 1.000000

Line No 28 -> expression_statement : expression SEMICOLON
i[3]=1;


Line No 28 -> statement : expression_statement
i[3]=1;


Line No 28 -> statements : statements statement
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;


Line No 29 -> argument_list : <empty>
Line No 29 -> factor : ID LPAREN argument_list RPAREN
func()

Line No 29 -> unary_expression : factor
func()

Line No 29 -> term : unary_expression
func()

Line No 29 -> simple_expression : term
func()

Line No 29 -> rel_expression : simple_expression
func()

Line No 29 -> logic_expression : rel_expression
func()

Line No 29 -> expression : logic_expression
func()

Line No 29 -> expression_statement : expression SEMICOLON
func();


Line No 29 -> statement : expression_statement
func();


Line No 29 -> statements : statements statement
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();


Line No 30 -> argument_list : <empty>
Line No 30 -> factor : ID LPAREN argument_list RPAREN
i()

Line No 30 -> unary_expression : factor
i()

Line No 30 -> term : unary_expression
i()

Line No 30 -> simple_expression : term
i()

Line No 30 -> rel_expression : simple_expression
i()

Line No 30 -> logic_expression : rel_expression
i()

Line No 30 -> expression : logic_expression
i()

Line No 30 -> expression_statement : expression SEMICOLON
i();


Line No 30 -> statement : expression_statement
i();


Line No 30 -> statements : statements statement
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();


Line No 31 -> factor : CONST_INT
0

Line No 31 -> unary_expression : factor
0

Line No 31 -> term : unary_expression
0

Line No 31 -> simple_expression : term
0

Line No 31 -> rel_expression : simple_expression
0

Line No 31 -> logic_expression : rel_expression
0

Line No 31 -> expression : logic_expression
0

Line No 31 -> statement : RETURN expression SEMICOLON
return 0;


Line No 31 -> statements : statements statement
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();
return 0;


Line No 32 -> compound_statement : LCURL statements RCURL
{
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();
return 0;
}


***PRINTING SYMBOL TABLE***

Scope Table # 2
7 --> < h : FUNC,INT > 
9 --> < func : FUNC,INT > < g : FUNC,VOID > 
10 --> < f : FUNC,FLOAT > 


Scope Table # 5
0 --> < c : VAR,INT > 
6 --> < i : VAR,INT > 
9 --> < j : VAR,INT > 
11 --> < a : ARR,INT > 

Line No 32 -> func_definition : type_specifier ID LPAREN RPAREN compound_statement
int main(){
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();
return 0;
}


Line No 32 -> unit : func_definition
int main(){
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();
return 0;
}


Line No 32 -> program : program unit
int func(int a){
a=2;
return a;
}
float f(){
return 1.0;
}
void g(){
return 0;
}
int h(int a);
int main(){
int a[2],c,i,j;
float c;
i=2.3;
a[2.5]=1;
j=2%3.7;
j=2%f();
func(a);
j=g();
j=2%(3.5<4);
b=8;
a=4;
i[3]=1;
func();
i();
return 0;
}


Line No 34 -> type_specifier : INT
int

Syntex error at Line 34 : syntax error, unexpected DOUBLE, expecting INT or FLOAT or VOID or RPAREN
***PRINTING SYMBOL TABLE***

Scope Table # 2
5 --> < main : FUNC,INT > 
7 --> < h : FUNC,INT > 
9 --> < func : FUNC,INT > < g : FUNC,VOID > 
10 --> < f : FUNC,FLOAT > 



Line count = 34
Lexical error count = 0
Semantic error count = 11
